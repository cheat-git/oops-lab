3b.
class OddNumberPrinter implements Runnable {
 private int count = 1;
 public void run() {
 while (count <= 3) {
 if (count % 2 != 0) {
 System.out.println("Odd Thread: " + count);
 count++;
 }
 }
 }
}
class ReverseNumberPrinter implements Runnable {
 private int number = 87456;
 private int originalNumber = number;
 public void run() {
 while (number > 0) {
 int digit = number % 10;
 System.out.println("Reverse Thread: " + digit);
 number /= 10;
 }
 number = originalNumber; // Reset number for future runs
 }
}
public class t12 {
 public static void main(String[] args) {
 OddNumberPrinter oddNumberPrinter = new OddNumberPrinter();
 ReverseNumberPrinter reverseNumberPrinter = new ReverseNumberPrinter();
 Thread t1 = new Thread(oddNumberPrinter);
 Thread t2 = new Thread(reverseNumberPrinter);
 t1.start();
 t2.start();
 }
}
8.b
import java.util.*;
public class t12 {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter a string: ");
 String input = sc.nextLine().toUpperCase();
 
 int doubleLetterCount = countDoubleLetterSequences(input);
 System.out.println("Uppercase Input: " + input);
 System.out.println("Number of Double Letter Sequences: " + doubleLetterCount);
 }
 static int countDoubleLetterSequences(String input) {
 int count = 0;
 for (int i = 0; i < input.length() - 1 ; i++) {
 if (input.charAt(i) == input.charAt(i + 1)) {
 count++;
 }
 }
 return count;
 }
}
 
6b.
class MultiTable {
 synchronized void displayTable(int num) {
 for (int i = 1; i <= 10; i++) {
 System.out.println(num + " x " + i + " = " + (num * i));
 try {
 Thread.sleep(1000) ;//1 second delay
 } catch (Exception e) {
 System.out.println(e);
 }
 }
 }
}
public class t12 {
 public static void main(String[] args) {
 MultiTable tb = new MultiTable();
 Thread t8 = new Thread(() -> tb.displayTable(8));
 Thread t9 = new Thread(() -> tb.displayTable(9));
 t8.start();
 t9.start();
 }
}